#include <iostream>
#include <vector>
#include <assert.h>
using namespace std;


class ArrayInt{
private:
    int m_lenght;
    int *m_data;
public:
    ArrayInt():m_lenght(0),m_data(nullptr){}
    ArrayInt(int lenght):m_lenght(lenght){
        assert(lenght >=0);
        if (lenght >0) m_data = new int[lenght];
        else m_data = nullptr;
    }
    ~ArrayInt(){delete [] m_data;}
    void erase(){
        delete[] m_data;
        m_data= nullptr;
        m_lenght=0;
    }
    int getLenght() const{return m_lenght;}
    int &operator[](int index){assert(index>=0 && index < m_lenght); return m_data[index];}
    void resize(int newleght){
        if (newleght == m_lenght)return;
        if (newleght <=0){erase();return;}
        int *data= new int[newleght];
        if (m_lenght > 0){
            //int elementsC = 0;
            //if (newleght > m_lenght)  elementsC = newleght; else elementsC = m_lenght;
            int elementsC = (newleght > m_lenght) ? m_lenght : newleght;
            for (int i = 0; i<elementsC;++i){
               // if (i>m_lenght)data[i]= 0;else
                 data[i] = m_data[i];
            }
        }
        delete [] m_data;
        m_data = data;
        m_lenght = newleght;
    }
    void ins (int value,int index){
        assert(index>=0 && index < m_lenght);
        int *data = new int(m_lenght+1);
        for (int i=0;i<index;i++) data[i]=m_data[i];
        data [index] = value;
        for (int i=index;i<m_lenght;i++) data[i+1]=m_data[i];
        delete [] m_data;
        m_data = data;
        m_lenght++;
    }


};



int main()
{
    ArrayInt arr(5);
    //arr.resize(10);
    arr.ins(5,4);
    cout<<arr[4]<<endl;
    return 0;
}
